version: '3'

services:
  token-db:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 10s
      timeout: 5s
      retries: 5

  user-db:
    restart: always
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user
    volumes:
      - user-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: .
    ports:
      - "8080:8080"
    depends_on:
      user-db:
        condition: service_healthy
      token-db:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # PostgreSQL
      USER_DB_HOST: user-db
      USER_DB_PORT: "5432"
      USER_DB_USER: postgres
      USER_DB_PASSWORD: postgres
      USER_DB_NAME: user

      # Redis
      TOKEN_DB_PORT: "6379"
      TOKEN_DB_HOST: token-db
      TOKEN_DB_PASSWORD: password

      # MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: mri-scans
      MINIO_SSL: "false"

volumes:
  user-db-data:
  minio-data:
